// This file handles socket.io based reliable signaling

// require('reliable-signaler')(httpServer || expressServer || portNumber);

exports.ReliableSignaler = ReliableSignaler;

function ReliableSignaler(app, socketCallback) {
    var io = require('socket.io').listen(app, {
        log: false,
        origins: '*:*'
    });

    var listOfRooms = {};

    io.on('connection', function(socket) {
        var currentUser = socket;
        var currentClient = '';

        socket.on('keep-in-server', function(roomid, callback) {
            listOfRooms[roomid] = roomid;
            currentUser.roomid = roomid;
            if(callback) callback();
        });

        socket.on('get-session-info', function(roomid, callback) {
            if (!!listOfRooms[roomid]) {
                callback(listOfRooms[roomid]);
                return;
            }

            //如果服务不存在，则一直去访问调用，直到服务器有人创建这个服务
            (function recursive() {
                if (currentUser && listOfRooms[roomid]) {
                    callback(listOfRooms[roomid]);
                    console.log("resursive");
                    return;
                }
                setTimeout(recursive, 1000);
            })();
        });

        socket.on('message', function(message) {
            socket.broadcast.emit('message', message);
        });

        socket.on('disconnect', function() {
            if (!currentUser) return;

            // autoCloseEntireSession = true;
            if (currentUser && currentUser.roomid && listOfRooms[currentUser.roomid]) {
                delete listOfRooms[currentUser.roomid];
            }

            global.dbHelper.updateState(currentClient, false);   //客户端断开时更新用户下载状态
            currentUser = null;
        });

        //获取客户端的 用户名
        socket.on("globalUser", function (data) {
            currentClient = data;
            console.log("service get client userName:" + currentClient);
            global.dbHelper.updateState(currentClient, true);  //客户端连接时更新用户上线状态

        });

        //  初始化监听添加好友
        init_AddFriend(socket);
        //  初始化推送消息
        init_PushMessage(socket);
        //  初始化房间信息
        init_HandleRoom(socket);

        if(socketCallback) {
            socketCallback(socket);
        }

        /************************ function code ************************************/

        /************************  房间处理      *********************/
        function init_HandleRoom(socket) {
            createRoom(socket);
            inviteIntoRoom(socket);

        }
        //  收到创建房间的信号
        function createRoom(socket) {
            socket.on("createRoom", function (data) {
                console.log("emit create room:" + data.owner + data.roomSessionId);
                global.dbHelper.createRoom(data.owner, data.channel, data.sessionid);
            });
        }
        //  邀请好友进房间
        function inviteIntoRoom(socket) {
            socket.on('inviteIntoRoom', function (roomInfo) {
                var friendsModel = global.dbHelper.getModel('userFriends');
                friendsModel.findOne({userName: roomInfo.owner}, function (err, doc) {
                    if(err) {
                        console.log("inviteInRoom err:" + err);
                        return;
                    }
                    if(!doc) {
                        console.log("no friends record");
                        return;
                    } else {
                        for(var m in doc.friends) {
                            if(doc.friends[m].name === roomInfo.friend) {
                                socket.broadcast.emit("_inviteIntoRoom", roomInfo);
                                return;
                            }
                        }
                        socket.emit("_no user", "用户不存在或不是好友，请先加为好友！");
                    }
                })
            });

            socket.on('success-join-room', function (roomInfo) {
                console.log("success-join-room");
                global.dbHelper.addUserInRoom(roomInfo.owner, roomInfo.channel, roomInfo.sessionid, roomInfo.friend, function (err, doc) {
                    if(err) {
                        return;
                    }
                    if(doc) {
                        console.log("db add user success!");
                    }
                });
                global.dbHelper.createSessions(roomInfo.owner, roomInfo.channel, roomInfo.sessionid, roomInfo.friend, function (err, doc) {
                    if(err) {
                        console.log(err);
                        return;
                    }

                    if(doc) {
                        console.log("用户同意加入房间后，数据库操作完毕（room tables : rooms and sessions save）!");
                    }
                });
            });
        }

        /************************  好友功能函数   **************/
        //   初始化好友添加的监听功能
        function init_AddFriend(socket) {
            //接受添加好友的请求信号
            socket.on('addFriendReq_1', function (subject, object) {
                console.log("subject object: " + subject + " 和 " + object);
                var userModel = global.dbHelper.getModel('user');
                //检测这个要添加的用户是否存在，是否有这个人
                userModel.findOne({name: object}, function (err, doc) {
                    if (err) {
                        console.log("addFriendReq_1 err:" + err);
                    } else {
                        if(!doc) {
                            socket.emit('_no user', "The user was not exist!");
                            console.log("_no user");
                            return;
                        }
                        var friendsModel = global.dbHelper.getModel('userFriends');
                        friendsModel.findOne({userName: subject}, function (err, friend) {
                            if (err) {
                                console.log("err:" + err);
                                return;
                            } else {
                                for (var m in friend.friends) {
                                    if (friend.friends[m].name === object) {
                                        socket.emit("already friend", object)//一旦发现好友中已经有这个人，就发送信号“已经是好友了！”
                                        return;
                                    }
                                }
                            }
                            //  保存这条记录
                            global.dbHelper.addUserRecord(subject, object);
                            //如果用户在线，则发送给用户这条好友请求信息（如果用户不在线，就需要 在每次用户链接到服务器的时候，去数据库检测信息并推送信息）
                            if( doc.state === true ) {
                                var data = {
                                    subject: subject,
                                    object: object
                                };
                                socket.broadcast.emit("addFriendReq_2", data);
                            }
                            else {
                                socket.emit("send invite");
                            }
                        });
                    }
                });
            });

            socket.on('addFriendRes_1', function (data) {
                console.log("addFriendRes_1:" + data.confirm);
                var result = 2;
                if (data.confirm) { //如果用户同意，则互相加为好友
                    console.log("confirm yes");
                    global.dbHelper.addFriend(data.subject, data.object);
                    global.dbHelper.addFriend(data.object, data.subject);
                    result = 1;
                }
                else {
                    console.log("confirm no");
                    var userModel = global.dbHelper.getModel('user');
                    userModel.findOne({name: data.subject}, function (err, doc) {
                        if(err) {
                            console.log("err:", err);
                            return;
                        }
                        if(doc.state === false) {
                            global.dbHelper.setRecRefuse(data.subject, data.object, true);
                        }
                    })
                    result = 0;
                }
                global.dbHelper.updateAddUserRec(data.subject, data.object, result);  //同意还是不同意呢。直接将结果写入数据库，用的时候再去查
                //广播信号，客户端通过object判断是否为自己，然后刷新好友列表
                socket.broadcast.emit("addFriendRes_2", data);
                //返回信号，刷新好友列表
                socket.emit("reFreshFriends", data);

                console.log("data:" + data.subject + data.object + data.result);
            });
        };

        /************** 消息推送  *************/
        // 初始化需要给客户端的推送消息
        function init_PushMessage(socket) {
            //  加好友
            setTimeout(function () {
                push_friendAdd(socket);
                push_friendRefuse(socket);
            }, 3000);
        };

        //推送好友添加请求信息
        function push_friendAdd(socket) {
            var addUserModel = global.dbHelper.getModel("addUser");
            addUserModel.find(function (err, doc) {
                if(err) {
                    console.log("push_friendAdd err:" + err);
                    return;
                }
                if(!doc) {
                    return;
                }
                for(var m in doc) {
                    console.log("push push curt:" + doc[m].result + "   " + currentClient);
                    if(doc[m].object === currentClient) {   //  所有object中是该用户的的记录都检测一遍，如果result是2,则推送消息，发送添加好友的信号
                        if(doc[m].result === 2) {
                            var data = {
                                subject: doc[m].subject,
                                object: doc[m].object
                            };
                            socket.emit("addFriendReq_2", data);

                        }
                    }
                }
            });
        };
        //推送好友添加的拒绝信息
        function push_friendRefuse(socket) {
            var addUserModel = global.dbHelper.getModel("addUser");
            addUserModel.find(function (err, doc) {
                if(err) {
                    console.log("push_friendRefuse err:" + err);
                    return;
                }
                if(!doc) {
                    return;
                }
                for(var m in doc) {
                    if(doc[m].subject === currentClient) {   //  所有subject中是该用户的的记录都检测一遍，如果refuse-true,则推送消息,发送不同意添加的消息
                        if(doc[m].refuse === true) {
                            var data = {
                                subject: doc[m].subject,
                                object: doc[m].object
                            };
                            socket.emit("addFriendrefuse", data);
                            global.dbHelper.setRecRefuse(data.subject, data.object, false); //设置为false  不再推送此消息了
                        }
                    }
                }
            });
        }
    });
}
