// <script src="/reliable-signaler/signaler.js"></script>

function initReliableSignaler(connection, socketURL) {
    var socket;
    
    if (!connection) throw '"connection" argument is required.';

    function initSocket() {
        if (socket && connection && connection.isInitiator && connection.roomid) {
            socket.emit('keep-session', connection.roomid);
        }

        socket = io.connect(socketURL || '/');
        socket.on('connect', function() {
            // if socket.io was disconnected out of network issues
            if (socket.isHavingError) {
                initSocket();
            }
            setTimeout(function () {
                socket.emit("globalUser", globalclientUser);
            }, 500);
            /*setImmediate(function () {
                socket.emit("globalUser", globalclientUser);

            });*/
        });
        socket.on('message', function(data) {
            if (onMessageCallbacks[data.channel]) {
                onMessageCallbacks[data.channel](data.message);
            };
        });
        socket.on('error', function() {
            socket.isHavingError = true;
            initSocket();
        });

        socket.on('disconnect', function() {
            socket.isHavingError = true;
            initSocket();
        });
        addFriendListener(socket);
        roomEventListener(socket);
    }
    initSocket();

    /*************************************register a listener for add friends event ****************/
    function addFriendListener(socket) {
        socket.on('_no user', function (data) {
            alert(data);
        });
        socket.on('addFriendReq_2', function (data) {
            if(data.object === globalclientUser) {
                //alert(data.subject + " want add you as friend!");
                var ret;
                if( alertBox_FriendAdd(data.subject) ) {
                    ret = {
                        subject: data.subject,
                        object: data.object,
                        confirm: true
                    };
                } else {
                    ret = {
                        subject: data.subject,
                        object: data.object,
                        confirm: false
                    };
                }
                socket.emit('addFriendRes_1', ret);
            }
        });
        socket.on('addFriendRes_2', function (data) {
            if (data.subject === globalclientUser) {
                if (data.confirm) {
                    //刷新好友列表
                    getfriedname(globalclientUser);
                } else {
                    alert(data.object + "不同意你的好友请求。");
                }
            }
        });
        // 刷新好友列表
        socket.on('reFreshFriends', function (data) {
            if(data.confirm) {
                getfriedname(globalclientUser);
            }
        });
        //  好友不在线的反馈
        socket.on('send invite', function () {
            alert("您的好友不在线，已经发送邀请！");
        });
        //  推送的拒绝添加好友的反馈
        socket.on('addFriendrefuse', function (data) {
            alert("不好意思，用户" + data.object + "不同意您的好友请求！");
        });
        //  已经是好有了
        socket.on('already friend', function (object) {
            alert(object + "已经是您的好友了！");
        })

    };

    //
    function alertBox_FriendAdd(subject)
    {//利用对话框返回的值 （true 或者 false）
        if(confirm(subject + "想要加你为好友"))
        {//如果是true ，那么就是同意加好友
            alert("同意了，你很快会有新的朋友了！");
            return true;
        }
        else
        {//否则就是不同意
            alert("你不同意别人加你哦，小气鬼！");
            return false;
        }
    }

    /*************************************register a listener for room event ***************/
    function roomEventListener(socket) {
        socket.on('_inviteIntoRoom', function (roomInfo) {
            if(roomInfo.friend === globalclientUser) {
                if(alertBox_JoinRoom(roomInfo.owner)) {
                    connection.channel = roomInfo.channel;
                    connection.userid = globalclientUser;
                    //connection.sessionid = roomInfo.sessionid;
                    //去服务器获取服务
                    socket.emit("get-session-info", roomInfo.sessionid, function (sessionid) {
                        if (sessionid === roomInfo.sessionid) {
                            connection.join({
                                sessionid: roomInfo.sessionid,
                                userid: roomInfo.owner,
                                extra: {},
                                session: connection.session
                            });
                            alert("成功进入房间！");
                        } else {
                            alert('服务器出现未知错误！');
                        }
                        socket.emit('success-join-room', roomInfo);
                    });
                }
            }
        });
    }

    function alertBox_JoinRoom(owner)
    {//利用对话框返回的值 （true 或者 false）
        if(confirm(owner + "想要邀请你进入会议"))
        {//如果是true ，那么就是同意加好友
            alert("同意了，马上要进入会议！");
            return true;
        }
        else
        {//否则就是不同意
            alert("你不同意，不会进入会议！");
            return false;
        }
    }

    var onMessageCallbacks = {};

    // using socket.io for signaling
    connection.openSignalingChannel = function(config) {
        var channel = config.channel || this.channel || 'default-channel';
        onMessageCallbacks[channel] = config.onmessage;
        if(config.onopen) setTimeout(config.onopen, 1);
        return {
            send: function(message) {
                socket.emit('message', {
                    sender: connection.userid,
                    channel: channel,
                    message: message
                });
            },
            channel: channel
        };
    };

    function listenEventHandler(eventName, eventHandler) {
        window.removeEventListener(eventName, eventHandler);
        window.addEventListener(eventName, eventHandler, false);
    }

    listenEventHandler('load', onLineOffLineHandler);
    listenEventHandler('online', onLineOffLineHandler);
    listenEventHandler('offline', onLineOffLineHandler);

    function onLineOffLineHandler() {
        if (!navigator.onLine) {
            console.warn('Internet channel seems disconnected.');
            return;
        }

        // if socket.io was disconnected out of network issues
        if (socket.isHavingError) {
            initSocket();
        }
    }
    
    function getRandomString() {
        if (window.crypto && window.crypto.getRandomValues && navigator.userAgent.indexOf('Safari') === -1) {
            var a = window.crypto.getRandomValues(new Uint32Array(3)),
                token = '';
            for (var i = 0, l = a.length; i < l; i++) {
                token += a[i].toString(36);
            }
            return token;
        } else {
            return (Math.random() * new Date().getTime()).toString(36).replace(/\./g, '');
        }
    }
    return {
        socket: socket,
        createNewRoomOnServer: function(roomid, successCallback) {
            // for reusability on failures & reconnect
            connection.roomid = roomid;
            connection.isInitiator = true;
            connection.userid = connection.userid || getRandomString();
            
            socket.emit('keep-in-server', roomid || connection.channel, successCallback || function() {});
        },
        getRoomFromServer: function(roomid, callback) {
            connection.userid = connection.userid || getRandomString();
            socket.emit('get-session-info', roomid, callback);
        }
    };
}
